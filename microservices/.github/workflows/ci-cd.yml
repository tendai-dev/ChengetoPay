name: Financial Platform CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and Test
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          api-gateway, escrow-service, payment-service, ledger-service, risk-service,
          treasury-service, evidence-service, compliance-service, workflow-service,
          journal-service, fees-service, refunds-service, transfers-service, fx-service,
          payouts-service, reserves-service, reconciliation-service, kyb-service,
          sca-service, disputes-service, dx-service, auth-service, idempotency-service,
          eventbus-service, saga-service, webhooks-service, observability-service,
          config-service, workers-service, portal-service, data-platform-service,
          compliance-ops-service, database-service, monitoring-service,
          message-queue-service, service-discovery, vault-service
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'
        cache: true

    - name: Install dependencies
      run: |
        cd ${{ matrix.service }}
        go mod download
        go mod tidy

    - name: Run linter
      run: |
        cd ${{ matrix.service }}
        golangci-lint run --timeout=5m

    - name: Run tests
      run: |
        cd ${{ matrix.service }}
        go test -v -race -coverprofile=coverage.out ./...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.service }}/coverage.out
        flags: ${{ matrix.service }}
        name: ${{ matrix.service }}-coverage

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan]
    strategy:
      matrix:
        service: [
          api-gateway, escrow-service, payment-service, ledger-service, risk-service,
          treasury-service, evidence-service, compliance-service, workflow-service,
          journal-service, fees-service, refunds-service, transfers-service, fx-service,
          payouts-service, reserves-service, reconciliation-service, kyb-service,
          sca-service, disputes-service, dx-service, auth-service, idempotency-service,
          eventbus-service, saga-service, webhooks-service, observability-service,
          config-service, workers-service, portal-service, data-platform-service,
          compliance-ops-service, database-service, monitoring-service,
          message-queue-service, service-discovery, vault-service
        ]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-images
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mongodb:
        image: mongo:6
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 27017:27017

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.24'

    - name: Run integration tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Run integration tests for each service
        for service in api-gateway database-service monitoring-service; do
          echo "Running integration tests for $service"
          cd $service
          go test -v -tags=integration ./...
          cd ..
        done

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, integration-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose-staging.yml up -d

    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test logic here
        # Example: curl -f http://staging-api.example.com/health

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images, integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose-production.yml up -d

    - name: Run production health checks
      run: |
        echo "Running production health checks..."
        # Add health check logic here
        # Example: curl -f https://api.example.com/health

  # Performance Tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add performance test logic here
        # Example: k6 run performance-tests/load-test.js

    - name: Generate performance report
      run: |
        echo "Generating performance report..."
        # Add report generation logic here

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ Deployment successful!"
        # Add success notification logic here
        # Example: Slack notification, email, etc.

    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        # Add failure notification logic here
        # Example: Slack notification, email, etc.
